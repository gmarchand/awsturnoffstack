AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: Turn off Stack from a SNS event with rollback features
Parameters:
  timeout:
    Type: Number
    Description: Seconds waited before stack termination
    Default: 10
  terminationTags:
    Type: CommaDelimitedList
    Description: 'AWS resource tags key to terminate stack, ex: "key1:value1,key2:value2"'
    Default: "foo:bar,john:doe"
Resources:

  SnsToSfnActivityLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: "PolicySfnActivityWorker"
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:*
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - states:List*
                  - states:Describe*
                  - states:SendTask*
                Resource:
                - arn:aws:states:*:*:execution:*:*
                - arn:aws:states:*:*:statemachine:*
  SnsToSfnActivityLambda:
    Type: AWS::Serverless::Function
    Properties:
      Description: Lambda links SNS to SFN Activity Task
      Handler: lambda_sns_to_sfn_activity.lambda_handler
      MemorySize: 128
      Role: !GetAtt [ SnsToSfnActivityLambdaRole, Arn ]
      Runtime: python3.6
      Timeout: 10
      Environment:
        Variables:
          ACTIVITY_ARN: !Ref StateMachineActivity
  SnsToSfnExecutionLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: PolicySfnExecuction
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - states:List*
            - states:Describe*
            - states:StartExecution
            Resource:
            - arn:aws:states:*:*:stateMachine:*
  SnsToSfnExecutionLambda:
    Type: AWS::Serverless::Function
    Properties:
      Description: Lambda links SNS to SFN Execution
      Handler: lambda_sns_to_sfn_execution.lambda_handler
      MemorySize: 128
      Role: !GetAtt [ SnsToSfnExecutionLambdaRole, Arn ]
      Runtime: python3.6
      Timeout: 10
      Environment:
        Variables:
          SFN_ARN: !Ref StateMachineSfn
  SfnActivityWorkerFailLambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      Description: Lambda failed the SFN Activity Task if event had been received
      Handler: lambda_sfn_activity_worker_fail.lambda_handler
      MemorySize: 128
      Role: !GetAtt [ SfnActivityWorkerFailLambdaRole, Arn ]
      Runtime: python3.6
      Timeout: 10
      Environment:
        Variables:
          ACTIVITY_ARN: !Ref StateMachineActivity
  SfnActivityWorkerFailLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: "Allow"
            Action:
              - "logs:*"
            Resource: "arn:aws:logs:*:*:*"
          - Effect: "Allow"
            Action:
              - "states:DescribeActivity"
              - "states:GetActivityTask"
            Resource: "arn:aws:states:*:*:activity:*"
          - Effect: "Allow"
            Action:
              - "states:SendTaskSuccess"
              - "states:SendTaskFailure"
              - "states:ListActivities"
              - "states:SendTaskHeartbeat"
            Resource: "*"
  SfnToSnsLambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      Description: Lambda publish message from SFN to SNS
      Handler: lambda_sfn_to_sns.lambda_handler
      MemorySize: 128
      Role: !GetAtt [ SfnToSnsLambdaRole, Arn ]
      Runtime: python3.6
      Timeout: 10
      Environment:
        Variables:
          SNS_SEND_NOTIF_ARN: !Ref TopicSendNotifSns
          SNS_TERMINATE_ACTION_ARN: !Ref TopicTerminateActionSns
  SfnToSnsLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: PublishSNS
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - logs:*
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
              - sns:List*
              - sns:Publish
            Resource: "*"
  CfnTerminationLambda:
    Type: 'AWS::Serverless::Function'
    Properties:
      Description: terminates cfn stack with specific tag key
      Handler: lambda_cfn_termination.lambda_handler
      MemorySize: 128
      Role: !GetAtt [ CfnTerminationLambdaRole,Arn ]
      Runtime: python3.6
      Timeout: 10
      Environment:
        Variables:
          CFN_TAGS: !Join [ ",", !Ref terminationTags ]
  CfnTerminationLambdaRole: 
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: PolicyTerminateCfn
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:*
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - cloudformation:DeleteStack
            - cloudformation:DescribeStacks
            Resource: "*"
  StateMachineSfn:
    Type: "AWS::StepFunctions::StateMachine"
    Properties:
      DefinitionString:
        !Sub
          - |-
            {
              "Comment": "Wait a cancel event from an Activity Worker. if no event comes from, step function executes the task",
              "StartAt": "InitVar",
              "States": {
                "InitVar": {
                  "Comment": "Initiate variables to track the state and deliver good message",
                  "Type": "Pass",
                  "Result": {
                    "terminate": false,
                    "cancel": false
                  },
                  "Next": "MessageStart"
                },
                "MessageStart": {
                  "Comment": "Send a notification that task will be execute soon",
                  "Type": "Task",
                  "Resource": "${SfnToSnsLambda}",
                  "ResultPath": null,
                  "Next": "Parallel"
                },
                "Parallel": {
                  "Type": "Parallel",
                  "Branches": [
                    {
                      "StartAt": "WaitWorker",
                      "States": {
                        "WaitWorker": {
                          "Comment": "The Activity is scheduled, we are waiting for a cancellation event",
                          "Type": "Wait",
                          "Seconds": ${timeout},
                          "InputPath":null,
                          "Next": "ActivityWorkerStatusTerminate"
                        },
                        "ActivityWorkerStatusTerminate": {
                          "Comment": "This task gets an activity task and send a fail status",
                          "Type": "Task",
                          "Resource": "${SfnActivityWorkerFailLambda}",
                          "ResultPath": null,
                          "InputPath":null,
                          "End": true
                        }
                      }
                    },
                    {
                      "StartAt": "CancelActivity",
                      "States": {
                        "CancelActivity": {
                          "Type": "Task",
                          "Comment": "Activity is waiting for an event from SNS",
                          "Resource": "${StateMachineActivity}",
                          "TimeoutSeconds": 10,
                          "ResultPath": null,
                          "Next": "Cancel",
                          "Catch": [
                            {
                              "ErrorEquals": [
                                "States.ALL"
                              ],
                              "Next": "Terminate"
                            }
                          ]
                        },
                        "Cancel": {
                          "Comment": "Activity Worker sends a cancellation event, so we cancel the task",
                          "Type": "Pass",
                          "Result": {
                            "cancel": true,
                            "terminate": false
                          },
                          "End": true
                        },
                        "Terminate": {
                          "Comment": "No cancellation event, we execute the task",
                          "Type": "Task",
                          "Resource": "${CfnTerminationLambda}",
                          "End": true
                        }
                      }
                    }
                  ],
                  "Next": "MessageEnd"
                },
                "MessageEnd": {
                  "Comment": "Send an ending message",
                  "Type": "Task",
                  "Resource": "${SfnToSnsLambda}",
                  "ResultPath": null,
                  "End": true
                }
              }
            }
          - {SfnToSnsLambda: !GetAtt [ SfnToSnsLambda, Arn ], SfnActivityWorkerFailLambda: !GetAtt [ SfnActivityWorkerFailLambda, Arn ], StateMachineActivity: !Ref StateMachineActivity, timeout: !Ref timeout, CfnTerminationLambda: !GetAtt [ CfnTerminationLambda, Arn ] }
      RoleArn: !GetAtt StateMachineSfnRole.Arn
  StateMachineSfnRole: 
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - states.eu-west-1.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: PolicyTerminateCfn
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: "Allow"
            Action:
              - lambda:InvokeFunction
            Resource: "*"
  StateMachineActivity:
    Type: "AWS::StepFunctions::Activity"
    Properties:
      Name: SwitchOffCancelActivity
  TopicTerminateNotifRcvSns:
    Type: "AWS::SNS::Topic"
    Properties:
      Subscription:
        -
          Endpoint:
            Fn::GetAtt:
              - "SnsToSfnExecutionLambda"
              - "Arn"
          Protocol: "lambda"
  TopicTerminateNotifRcvSnsPerm:
    Type: 'AWS::Lambda::Permission'
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt [ SnsToSfnExecutionLambda, Arn ]
      Principal: sns.amazonaws.com
      SourceArn: !Ref TopicTerminateNotifRcvSns
  TopicCancelNotifRcvSns:
    Type: "AWS::SNS::Topic"
    Properties:
      Subscription:
        -
          Endpoint:
            Fn::GetAtt:
              - "SnsToSfnActivityLambda"
              - "Arn"
          Protocol: "lambda"
  TopicSendNotifSns:
    Type: "AWS::SNS::Topic"
  TopicTerminateActionSns:
    Type: "AWS::SNS::Topic"
Outputs:
  SnsSendDeletion:
    Description: Topic SNS to send a deletion notification of environment
    Value: !Ref TopicTerminateNotifRcvSns
    Export:
      Name: !Sub "${AWS::StackName}-SnsSendDeletion"
  SnsSendCancelation:
    Description: Topic SNS to send a cancelation notification of environment deletion
    Value: !Ref TopicCancelNotifRcvSns
    Export:
      Name: !Sub "${AWS::StackName}-SnsSendCancelation"
  SnsSendMessage:
    Description: Topic SNS to receive information
    Value: !Ref TopicSendNotifSns
    Export:
      Name: !Sub "${AWS::StackName}-SnsSendMessage"
  SnsReceiveDeletionAction:
    Description: Topic SNS to receive order of environment deletion
    Value: !Ref TopicTerminateActionSns
    Export:
      Name: !Sub "${AWS::StackName}-SnsReceiveDeletionAction"




